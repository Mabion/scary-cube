import"./boot.js";export function isPath(path){return 0<=path.indexOf(".")}export function root(path){var dotIndex=path.indexOf(".");if(-1===dotIndex){return path}return path.slice(0,dotIndex)}export function isAncestor(base,path){return 0===base.indexOf(path+".")}export function isDescendant(base,path){return 0===path.indexOf(base+".")}export function translate(base,newBase,path){return newBase+path.slice(base.length)}export function matches(base,path){return base===path||isAncestor(base,path)||isDescendant(base,path)}export function normalize(path){if(Array.isArray(path)){for(var parts=[],i=0,args;i<path.length;i++){args=path[i].toString().split(".");for(var j=0;j<args.length;j++){parts.push(args[j])}}return parts.join(".")}else{return path}}export function split(path){if(Array.isArray(path)){return normalize(path).split(".")}return path.toString().split(".")}export function get(root,path,info){for(var prop=root,parts=split(path),i=0;i<parts.length;i++){if(!prop){return}var part=parts[i];prop=prop[part]}if(info){info.path=parts.join(".")}return prop}export function set(root,path,value){var prop=root,parts=split(path),last=parts[parts.length-1];if(1<parts.length){for(var i=0,part;i<parts.length-1;i++){part=parts[i];prop=prop[part];if(!prop){return}}prop[last]=value}else{prop[path]=value}return parts.join(".")}export var isDeep=isPath;